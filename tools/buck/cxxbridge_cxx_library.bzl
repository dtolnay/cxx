"""cxxbridge_cxx_library macro"""

def cxxbridge_cxx_library(
        name,
        crate_name,
        bridge_srcs,
        srcs = None,
        headers = None,
        deps = None,
        visibility = None):
    """Generate C++ source for one or more Rust cxx::bridges and bundle into a cxx_library.

    Args:
        name: A unique name for the cc_library rule.
        crate_name: The name of the corresponding Rust crate, used as the include_prefix.
        bridge_srcs: One or more Rust source files containing cxx::bridge modules.
        srcs: Additional sources. Forwarded to cxx_library unmodified.
        headers: Additional headers. Forwarded to cxx_library unmodified.
        deps: Additional deps. Forwarded to cxx_library unmodified.
        visibility: Visibility for all rules generated by this macro.
    """

    gen_srcs = []
    gen_hdrs = {}
    for bridge_source in bridge_srcs:
        source_basename = bridge_source.rsplit("/", 1)[-1]
        header_target = name + "-" + source_basename + "-gen-header"
        source_target = name + "-" + source_basename + "-gen-source"

        hdr_out = source_basename + ".h"
        genrule(
            name = header_target,
            srcs = [bridge_source],
            out = hdr_out,
            cmd = "$(exe //:codegen) --header ${SRCS} > ${OUT}",
            visibility = visibility,
        )

        genrule(
            name = source_target,
            srcs = [bridge_source],
            out = source_basename + ".cc",
            cmd = "$(exe //:codegen) ${SRCS} > ${OUT}",
            visibility = visibility,
        )

        gen_hdrs[hdr_out] = ":" + header_target
        gen_srcs.append(":" + source_target)

    cxx_library(
        name = name,
        srcs = srcs + gen_srcs,
        headers = flatten_dicts(headers, gen_hdrs),
        header_namespace = crate_name,
        deps = deps,
        visibility = visibility,
    )

