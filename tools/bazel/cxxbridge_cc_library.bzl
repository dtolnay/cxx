"""cxxbridge_cc_library macro"""

load("@rules_cc//cc:defs.bzl", "cc_library")

def cxxbridge_cc_library(
        name,
        crate_name,
        bridge_srcs,
        srcs = None,
        hdrs = None,
        deps = None,
        strip_include_prefix = None,
        visibility = None):
    """Generate C++ source for one or more Rust cxx::bridges and bundle into a cc_library.

    Args:
        name: A unique name for the cc_library rule.
        crate_name: The name of the corresponding Rust crate, used as the include_prefix.
        bridge_srcs: One or more Rust source files containing cxx::bridge modules.
        srcs: Additional sources. Forwarded to cc_library unmodified.
        hdrs: Additional headers. Forwarded to cc_library unmodified.
        deps: Additional deps. Forwarded to cc_library unmodified.
        strip_include_prefix: Forwarded to cc_library unmodified.
        visibility: Visibility for all rules generated by this macro.
    """

    gen_srcs = []
    gen_hdrs = []
    for bridge_source in bridge_srcs:
        source_basename = bridge_source.rsplit("/", 1)[-1]
        header_target = name + "-" + source_basename + "-gen-header"
        source_target = name + "-" + source_basename + "-gen-source"

        header_out = source_basename + ".h"
        if strip_include_prefix:
            header_out = strip_include_prefix + "/" + header_out

        native.genrule(
            name = header_target,
            srcs = [bridge_source],
            outs = [header_out],
            cmd = "$(location //:codegen) --header $< > $@",
            tools = ["//:codegen"],
            visibility = visibility,
        )

        native.genrule(
            name = source_target,
            srcs = [bridge_source],
            outs = [source_basename + ".cc"],
            cmd = "$(location //:codegen) $< > $@",
            tools = ["//:codegen"],
            visibility = visibility,
        )

        gen_hdrs.append(header_target)
        gen_srcs.append(source_target)

    cc_library(
        name = name,
        srcs = srcs + gen_srcs,
        hdrs = hdrs + gen_hdrs,
        include_prefix = crate_name,
        strip_include_prefix = strip_include_prefix,
        deps = deps,
        visibility = visibility,
    )
