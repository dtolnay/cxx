// Rustfmt mangles the extern type alias.
// https://github.com/rust-lang/rustfmt/issues/4159
#[rustfmt::skip]
#[cxx::bridge(namespace = tests)]
pub mod ffi {
    type Shared = crate::ffi::Shared;
    type Enum = crate::ffi::Enum;

    extern "C" {
        include!("cxx-test-suite/tests.h");
        // Need complete C++ type declaration generated by other bridge for aliased shared types.
        include!("cxx-test-suite/lib.rs.h");

        type C = crate::ffi::C;

        // TODO: The alias prefix can be removed once these are in their own namespace.
        fn alias_c_return_shared() -> Shared;
        fn alias_c_return_ref(shared: &Shared) -> &usize;
        fn alias_c_return_mut(shared: &mut Shared) -> &mut usize;
        fn alias_c_return_enum(n: u16) -> Enum;
        fn alias_c_return_unique_ptr_vector_shared() -> UniquePtr<CxxVector<Shared>>;

        fn alias_c_take_shared(shared: Shared);
        // TODO: This don't work yet because both bridges try to emit the rust_vec$tests$Shared
        // functions. Need the remote bridge to always emit if this is gonna work. Or can we work
        // around ODR by making the rust_vec functions inline?
        //fn alias_c_take_rust_vec_shared(v: Vec<Shared>);
        // TODO: Box<Shared> probably has the same problem, not currently tested
        // TODO: Same for UniquePtr<Shared>, not currently tested
        // TODO: Below probably doesn't work if the remote bridge doesn't use CxxVector<Shared>
        fn alias_c_take_unique_ptr_vector_shared(v: UniquePtr<CxxVector<Shared>>);
        fn alias_c_take_enum(e: Enum);

        fn c_take_unique_ptr(c: UniquePtr<C>);
    }

    extern "Rust" {
        // TODO: The alias prefix can be removed once these are in their own namespace.
        fn alias_r_return_shared() -> Shared;
        fn alias_r_return_ref(shared: &Shared) -> &usize;
        fn alias_r_return_mut(shared: &mut Shared) -> &mut usize;
        fn alias_r_return_enum(n: u32) -> Enum;

        fn alias_r_take_shared(shared: Shared);
        fn alias_r_take_enum(e: Enum);
    }
}

use crate::r_return_enum as alias_r_return_enum;
use crate::r_return_mut as alias_r_return_mut;
use crate::r_return_ref as alias_r_return_ref;
use crate::r_return_shared as alias_r_return_shared;
use crate::r_take_enum as alias_r_take_enum;
use crate::r_take_shared as alias_r_take_shared;
