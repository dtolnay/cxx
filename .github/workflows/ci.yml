name: CI

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule: [cron: "40 1 * * *"]

permissions:
  contents: read

jobs:
  pre_ci:
    uses: dtolnay/.github/.github/workflows/pre_ci.yml@master

  test:
    name: ${{matrix.name || format('Rust {0}', matrix.rust)}}
    needs: pre_ci
    if: needs.pre_ci.outputs.continue
    runs-on: ${{matrix.os || 'ubuntu'}}-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - rust: nightly
          - rust: beta
          - rust: stable
          - rust: 1.60.0
          - rust: 1.64.0
          - name: Cargo on macOS
            rust: nightly
            os: macos
          - name: Cargo on Windows (msvc)
            rust: nightly-x86_64-pc-windows-msvc
            os: windows
            flags: /EHsc
    env:
      CXXFLAGS: ${{matrix.flags}}
      RUSTFLAGS: --cfg deny_warnings -Dwarnings
    timeout-minutes: 45
    steps:
      - name: Enable symlinks (windows)
        if: matrix.os == 'windows'
        run: git config --global core.symlinks true
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{matrix.rust}}
          components: rust-src
      - name: Determine test suite subset
        # Our Windows and macOS jobs are the longest running, so exclude the
        # relatively slow compiletest from them to speed up end-to-end CI time,
        # except during cron builds when no human is presumably waiting on the
        # build. The extra coverage is not particularly valuable, and we can
        # still ensure the test is kept passing on the basis of the scheduled
        # builds.
        run: |
          echo RUSTFLAGS=$RUSTFLAGS >> $GITHUB_ENV
          echo exclude=--exclude cxx-test-suite ${{matrix.rust == '1.60.0' && '--exclude cxxbridge-cmd' || ''}} >> $GITHUB_OUTPUT
        env:
          RUSTFLAGS: ${{env.RUSTFLAGS}} ${{matrix.os && github.event_name != 'schedule' && '--cfg skip_ui_tests' || ''}}
        id: testsuite
        shell: bash
      - run: cargo run --manifest-path demo/Cargo.toml
      - run: cargo test --workspace ${{steps.testsuite.outputs.exclude}}
      - run: cargo check --no-default-features --features alloc
        env:
          RUSTFLAGS: --cfg compile_error_if_std ${{env.RUSTFLAGS}}
      - run: cargo check --no-default-features
        env:
          RUSTFLAGS: --cfg compile_error_if_alloc --cfg cxx_experimental_no_alloc ${{env.RUSTFLAGS}}

  buck:
    name: Buck2 on ${{matrix.os == 'ubuntu' && 'Linux' || matrix.os == 'macos' && 'macOS' || matrix.os == 'windows' && 'Windows' || '???'}}
    runs-on: ${{matrix.os}}-latest
    if: github.event_name != 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rust-src
      - uses: dtolnay/install-buck2@latest
      - name: Install lld
        run: sudo apt-get install lld
        if: matrix.os == 'ubuntu'
      - run: buck2 run demo
      - run: buck2 build ...
      - run: buck2 test ...
      - uses: dtolnay/install@reindeer
        if: matrix.os == 'ubuntu'
      - run: reindeer buckify
        if: matrix.os == 'ubuntu'
        working-directory: third-party
      - name: Check reindeer-generated BUCK file up to date
        run: git diff --exit-code
        if: matrix.os == 'ubuntu'

  bazel:
    name: Bazel on Linux
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3
      - name: Install Bazel
        run: |
          wget -q -O install.sh https://github.com/bazelbuild/bazel/releases/download/6.0.0/bazel-6.0.0-installer-linux-x86_64.sh
          chmod +x install.sh
          ./install.sh --user
          echo $HOME/bin >> $GITHUB_PATH
      - name: Install lld
        run: sudo apt-get install lld
      - run: bazel run demo --verbose_failures --noshow_progress
      - run: bazel test ... --verbose_failures --noshow_progress

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy, rust-src
      - run: cargo clippy --workspace --tests -- -Dclippy::all

  clang-tidy:
    name: Clang Tidy
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3
      - name: Install clang-tidy
        run: sudo apt-get install clang-tidy-11
      - name: Run clang-tidy
        run: clang-tidy-11 src/cxx.cc --warnings-as-errors=*

  outdated:
    name: Outdated
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/install@cargo-outdated
      - run: cargo outdated --workspace --exit-code 1
